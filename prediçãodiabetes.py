# -*- coding: utf-8 -*-
"""PrediçãoDiabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V-y_RINdKIVq-zeiAwTzhC6M7lhXCl0i
"""

#Bibliotecas

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#Upload do dataset

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#Mostrando as 5 primeiras linhas dos dados

diabetes_dataset.head

#Numeros de linhas e colunas do dataset

diabetes_dataset.shape

#Obtendo as mensurações estatisticas 

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()
# 0 -> Sem Diabetes, 1 -> Com Diabetes

diabetes_dataset.groupby('Outcome').mean()

#Separando data e rótulos

X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

#Divisão de teste

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#Treinamento do Modelo

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

#Acurácia do modelo de treinamento

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Acurácia do modelo de treinamento é : ', training_data_accuracy)

#Acurácia do modelo de teste

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Acurácia do modelo de treinamento é : ', test_data_accuracy)

#Fazendo o sistema de predição

input_data = (5,166,72,19,175,25.8,0.587,51)

#Mudando o input_data para numpy array

input_data_as_numpy_array = np.asarray(input_data)

#Remodelando o array para uma instância

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('A pessoa não é diabética!')
else:
  print('A pessoa é diabética!')

#Salvando o modelo treinado

import pickle

filename = 'diabetes_model.sav'
pickle.dump(classifier, open(filename, 'wb'))

#Lendo o modelo salvo

loaded_model = pickle.load(open('diabetes_model.sav', 'rb'))

input_data = (5,166,72,19,175,25.8,0.587,51)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('A pessoa não é diabética')
else:
  print('A pessoa é diabética')

for column in X.columns:
  print(column)